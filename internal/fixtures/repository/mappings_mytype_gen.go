// Code generated by construct, DO NOT EDIT.
package repository

import (
	"database/sql"
	"encoding/json"
	uuid "github.com/gofrs/uuid"
	construct "github.com/networkteam/construct"
	fixtures "github.com/networkteam/construct/internal/fixtures"
	cjson "github.com/networkteam/construct/json"
	"time"
)

const (
	myType_id       = "my_type.id"
	myType_foo      = "my_type.foo"
	myType_bar      = "my_type.the_bar"
	myType_baz      = "my_type.baz"
	myType_lastTime = "my_type.last_time"
)

var myTargetTypeSortFields = map[string]string{
	"foo":      myType_foo,
	"lasttime": myType_lastTime,
}

type MyTargetTypeChangeSet struct {
	ID       *uuid.UUID
	Foo      *string
	Bar      []byte
	Baz      *fixtures.MyEmbeddedType
	LastTime **time.Time
}

func (c MyTargetTypeChangeSet) toMap() map[string]interface{} {
	m := make(map[string]interface{})
	if c.ID != nil {
		m["id"] = *c.ID
	}
	if c.Foo != nil {
		m["foo"] = *c.Foo
	}
	if c.Bar != nil {
		m["the_bar"] = c.Bar
	}
	if c.Baz != nil {
		data, _ := json.Marshal(c.Baz)
		m["baz"] = data
	}
	if c.LastTime != nil {
		m["last_time"] = *c.LastTime
	}
	return m
}

func MyTargetTypeToChangeSet(r fixtures.MyType) (c MyTargetTypeChangeSet) {
	if r.ID != uuid.Nil {
		c.ID = &r.ID
	}
	c.Foo = &r.Foo
	c.Bar = r.Bar
	c.Baz = &r.Baz
	c.LastTime = &r.LastTime
	return
}

func myTargetTypeDefaultSelectJson() cjson.JsonBuildObjectBuilder {
	return cjson.JsonBuildObject().
		Set("ID", cjson.Exp("my_type.id")).
		Set("Foo", cjson.Exp("my_type.foo")).
		Set("Bar", cjson.Exp("ENCODE(my_type.the_bar,'BASE64')")).
		Set("Baz", cjson.Exp("my_type.baz")).
		Set("LastTime", cjson.Exp("my_type.last_time"))
}

func myTargetTypeScanJsonRow(row construct.RowScanner) (result fixtures.MyType, err error) {
	var data []byte
	if err := row.Scan(&data); err != nil {
		if err == sql.ErrNoRows {
			return result, construct.ErrNotFound
		}
		return result, err
	}
	return result, json.Unmarshal(data, &result)
}
