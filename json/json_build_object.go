package json

import "strings"

// JsonBuildObjectBuilder is a builder for a JSON_BUILD_OBJECT function
type JsonBuildObjectBuilder struct {
	m map[string]SqlGenerator
}

var _ SqlGenerator = JsonBuildObjectBuilder{}

// JsonBuildObject starts a builder for a JSON_BUILD_OBJECT function
func JsonBuildObject() JsonBuildObjectBuilder {
	return JsonBuildObjectBuilder{m: make(map[string]SqlGenerator)}
}

// GenerateSql implements SqlGenerator
func (b JsonBuildObjectBuilder) GenerateSql(sb *strings.Builder) {
	sb.WriteString("JSON_BUILD_OBJECT(")
	i := 0

	keys := make([]string, 0, len(b.m))
	for key := range b.m {
		keys = append(keys, key)
	}

	for _, key := range keys {
		v := b.m[key]
		if i > 0 {
			sb.WriteRune(',')
		}
		sb.WriteString(pqQuoteString(key))
		sb.WriteRune(',')
		v.GenerateSql(sb)
		i++
	}
	sb.WriteString(")")
}

// Set adds or updates a mapping from a property name to value generated by SqlGenerator like Exp
func (b JsonBuildObjectBuilder) Set(propertyName string, value SqlGenerator) JsonBuildObjectBuilder {
	b.m[propertyName] = value
	return b
}

// Delete removes a property name from the mapping
func (b JsonBuildObjectBuilder) Delete(propertyName string) {
	delete(b.m, propertyName)
}

// ToSql returns SQL for the builder
func (b JsonBuildObjectBuilder) ToSql() string {
	sb := new(strings.Builder)
	b.GenerateSql(sb)
	return sb.String()
}

func pqQuoteString(s string) string {
	return "'" + strings.ReplaceAll(s, "'", "''") + "'"
}
